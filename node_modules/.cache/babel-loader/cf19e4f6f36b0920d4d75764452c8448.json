{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\brady\\\\Thinkful\\\\Flashcard\\\\Project_Flashcards_Qualified_1\\\\src\\\\Layout\\\\Form.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CreateCard(props) {\n  _s();\n\n  const {\n    deckId,\n    cardId\n  } = useParams();\n  const {\n    newItem,\n    isDeck\n  } = props;\n  const [formNames, setFormNames] = useState({\n    labelFirst: \"\",\n    labelSecond: \"\",\n    titleNewOrEdit: \"\",\n    titleCardOrDeck: \"\"\n  });\n  useEffect(() => {\n    isDeck ? newItem ? setFormNames({\n      titleNewOrEdit: \"New\",\n      labelFirst: \"Name\",\n      labelSecond: \"Description\",\n      titleCardOrDeck: \"Deck\"\n    }) : setFormNames({\n      titleNewOrEdit: \"Edit\",\n      labelFirst: \"Name\",\n      labelSecond: \"Description\",\n      titleCardOrDeck: \"Deck\"\n    }) : newItem ? setFormNames({\n      titleNewOrEdit: \"New\",\n      labelFirst: \"Front\",\n      labelSecond: \"Back\",\n      titleCardOrDeck: \"Card\"\n    }) : setFormNames({\n      titleNewOrEdit: \"Edit\",\n      labelFirst: \"Front\",\n      labelSecond: \"Back\",\n      titleCardOrDeck: \"Card\"\n    });\n  }, [newItem, isDeck]);\n\n  function textAreaOrNot(whatIsIt, formNames) {\n    if (whatIsIt) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          for: \"deckName\",\n          children: formNames.labelFirst\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          placeholder: \"Deck Name\",\n          className: \"form-control\",\n          type: \"text\",\n          id: \"deckName\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this);\n    } else {\n      /*#__PURE__*/\n      _jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          for: \"firstTextArea\",\n          children: formNames.labelFirst\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: \"form-control\",\n          id: \"firstTextArea\",\n          placeholder: \"Front side of card\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 7\n      }, this);\n    }\n\n    return;\n  }\n\n  console.log(formNames);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: `${formNames.titleNewOrEdit} ${formNames.titleCardOrDeck}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [textAreaOrNot(isDeck, formNames), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          for: \"secondTextArea\",\n          children: formNames.labelSecond\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: \"form-control\",\n          id: \"secondTextArea\",\n          placeholder: isDeck ? \"Description of deck\" : \"Back side of card\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CreateCard, \"FvLLw55ko/izbQ3iTKheO1mPrXA=\", false, function () {\n  return [useParams];\n});\n\n_c = CreateCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateCard\");","map":{"version":3,"sources":["C:/Users/brady/Thinkful/Flashcard/Project_Flashcards_Qualified_1/src/Layout/Form.js"],"names":["React","useEffect","useState","useParams","CreateCard","props","deckId","cardId","newItem","isDeck","formNames","setFormNames","labelFirst","labelSecond","titleNewOrEdit","titleCardOrDeck","textAreaOrNot","whatIsIt","console","log"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router\";\r\n\r\nexport default function CreateCard(props) {\r\n  const { deckId, cardId } = useParams();\r\n  const { newItem, isDeck } = props;\r\n  const [formNames, setFormNames] = useState({\r\n    labelFirst: \"\",\r\n    labelSecond: \"\",\r\n    titleNewOrEdit: \"\",\r\n    titleCardOrDeck: \"\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    isDeck\r\n      ? newItem\r\n        ? setFormNames({\r\n            titleNewOrEdit: \"New\",\r\n            labelFirst: \"Name\",\r\n            labelSecond: \"Description\",\r\n            titleCardOrDeck: \"Deck\",\r\n          })\r\n        : setFormNames({\r\n            titleNewOrEdit: \"Edit\",\r\n            labelFirst: \"Name\",\r\n            labelSecond: \"Description\",\r\n            titleCardOrDeck: \"Deck\",\r\n          })\r\n      : newItem\r\n      ? setFormNames({\r\n          titleNewOrEdit: \"New\",\r\n          labelFirst: \"Front\",\r\n          labelSecond: \"Back\",\r\n          titleCardOrDeck: \"Card\",\r\n        })\r\n      : setFormNames({\r\n          titleNewOrEdit: \"Edit\",\r\n          labelFirst: \"Front\",\r\n          labelSecond: \"Back\",\r\n          titleCardOrDeck: \"Card\",\r\n        });\r\n  }, [newItem, isDeck]);\r\n\r\n  function textAreaOrNot(whatIsIt, formNames) {\r\n    if (whatIsIt) {\r\n      return (\r\n        <div className=\"form-group\">\r\n          <label for=\"deckName\">{formNames.labelFirst}</label>\r\n          <input\r\n            placeholder=\"Deck Name\"\r\n            className=\"form-control\"\r\n            type=\"text\"\r\n            id=\"deckName\"\r\n          />\r\n        </div>\r\n      );\r\n    } else {\r\n      <div className=\"form-group\">\r\n        <label for=\"firstTextArea\">{formNames.labelFirst}</label>\r\n        <textarea\r\n          className=\"form-control\"\r\n          id=\"firstTextArea\"\r\n          placeholder=\"Front side of card\"\r\n        ></textarea>\r\n      </div>;\r\n    }\r\n\r\n    return;\r\n  }\r\n\r\n  console.log(formNames);\r\n  return (\r\n    <section className=\"container\">\r\n      <h1>{`${formNames.titleNewOrEdit} ${formNames.titleCardOrDeck}`}</h1>\r\n      <form>\r\n        {textAreaOrNot(isDeck, formNames)}\r\n        <div className=\"form-group\">\r\n          <label for=\"secondTextArea\">{formNames.labelSecond}</label>\r\n          <textarea\r\n            className=\"form-control\"\r\n            id=\"secondTextArea\"\r\n            placeholder={isDeck ? \"Description of deck\" : \"Back side of card\"}\r\n          ></textarea>\r\n        </div>\r\n      </form>\r\n    </section>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}