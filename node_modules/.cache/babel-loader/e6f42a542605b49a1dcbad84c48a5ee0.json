{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\brady\\\\Thinkful\\\\Flashcard\\\\Project_Flashcards_Qualified_1\\\\src\\\\Layout\\\\Form.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router\";\nimport { readDeck, readCard } from \"../utils/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CreateCard(props) {\n  _s();\n\n  const {\n    deckId,\n    cardId\n  } = useParams();\n  const {\n    newItem,\n    isDeck\n  } = props;\n  const [deck, setDeck] = useState({\n    cards: []\n  });\n  const [card, setCard] = useState({});\n  const [inputsFromForm, setInputsFromForm] = useState({\n    firstInput: \"\",\n    secondInput: \"\"\n  });\n  const [formNames, setFormNames] = useState({\n    labelFirst: \"\",\n    labelSecond: \"\",\n    titleNewOrEdit: \"\",\n    titleCardOrDeck: \"\"\n  });\n  useEffect(() => {\n    const abortController = new AbortController();\n\n    if (deckId) {\n      try {\n        readDeck(deckId, abortController.signal).then(element => {\n          setDeck(element);\n        });\n      } catch (error) {\n        if (error.name === \"AbortError\") {\n          console.log(\"Aborted\", deck);\n        } else {\n          throw error;\n        }\n      }\n    }\n\n    if (cardId) {\n      try {\n        readCard(cardId, abortController.signal).then(element => {\n          setCard(element);\n        });\n      } catch (error) {\n        if (error.name === \"AbortError\") {\n          console.log(\"Aborted\", card);\n        } else {\n          throw error;\n        }\n      }\n    }\n  }, []);\n  useEffect(() => {\n    isDeck ? newItem ? setFormNames({\n      titleNewOrEdit: \"New\",\n      labelFirst: \"Name\",\n      labelSecond: \"Description\",\n      titleCardOrDeck: \"Deck\"\n    }) : setFormNames({\n      titleNewOrEdit: \"Edit\",\n      labelFirst: \"Name\",\n      labelSecond: \"Description\",\n      titleCardOrDeck: \"Deck\"\n    }) : newItem ? setFormNames({\n      titleNewOrEdit: \"New\",\n      labelFirst: \"Front\",\n      labelSecond: \"Back\",\n      titleCardOrDeck: \"Card\"\n    }) : setFormNames({\n      titleNewOrEdit: \"Edit\",\n      labelFirst: \"Front\",\n      labelSecond: \"Back\",\n      titleCardOrDeck: \"Card\"\n    });\n  }, [isDeck, newItem]);\n\n  function textAreaOrNot(whatIsIt, formNames) {\n    if (whatIsIt) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          for: \"deckName\",\n          children: formNames.labelFirst\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          placeholder: \"Deck Name\",\n          className: \"form-control\",\n          type: \"text\",\n          id: \"deckName\",\n          onChange: event => setInputsFromForm({ ...inputsFromForm,\n            secondInput: event.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          for: \"firstTextArea\",\n          children: formNames.labelFirst\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: \"form-control\",\n          id: \"firstTextArea\",\n          placeholder: \"Front side of card\",\n          onChange: event => setInputsFromForm({ ...inputsFromForm,\n            secondInput: event.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: `${formNames.titleNewOrEdit} ${formNames.titleCardOrDeck}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [textAreaOrNot(isDeck, formNames), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          for: \"secondTextArea\",\n          children: formNames.labelSecond\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: \"form-control\",\n          id: \"secondTextArea\",\n          placeholder: isDeck ? \"Description of deck\" : \"Back side of card\",\n          onChange: event => setInputsFromForm({ ...inputsFromForm,\n            firstInput: event.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-secondary\",\n          children: newItem ? \"Done\" : \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"btn btn-primary mx-2\",\n          children: newItem ? \"Save\" : \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CreateCard, \"H1uaUaeMKbgc2/xQYwAEyLUGRXg=\", false, function () {\n  return [useParams];\n});\n\n_c = CreateCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateCard\");","map":{"version":3,"sources":["C:/Users/brady/Thinkful/Flashcard/Project_Flashcards_Qualified_1/src/Layout/Form.js"],"names":["React","useEffect","useState","useParams","readDeck","readCard","CreateCard","props","deckId","cardId","newItem","isDeck","deck","setDeck","cards","card","setCard","inputsFromForm","setInputsFromForm","firstInput","secondInput","formNames","setFormNames","labelFirst","labelSecond","titleNewOrEdit","titleCardOrDeck","abortController","AbortController","signal","then","element","error","name","console","log","textAreaOrNot","whatIsIt","event","target","value"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport { readDeck, readCard } from \"../utils/api\";\r\n\r\nexport default function CreateCard(props) {\r\n  const { deckId, cardId } = useParams();\r\n  const { newItem, isDeck } = props;\r\n  const [deck, setDeck] = useState({ cards: [] });\r\n  const [card, setCard] = useState({});\r\n  const [inputsFromForm, setInputsFromForm] = useState({\r\n    firstInput: \"\",\r\n    secondInput: \"\",\r\n  });\r\n  const [formNames, setFormNames] = useState({\r\n    labelFirst: \"\",\r\n    labelSecond: \"\",\r\n    titleNewOrEdit: \"\",\r\n    titleCardOrDeck: \"\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    const abortController = new AbortController();\r\n    if (deckId) {\r\n      try {\r\n        readDeck(deckId, abortController.signal).then((element) => {\r\n          setDeck(element);\r\n        });\r\n      } catch (error) {\r\n        if (error.name === \"AbortError\") {\r\n          console.log(\"Aborted\", deck);\r\n        } else {\r\n          throw error;\r\n        }\r\n      }\r\n    }\r\n    if (cardId) {\r\n      try {\r\n        readCard(cardId, abortController.signal).then((element) => {\r\n          setCard(element);\r\n        });\r\n      } catch (error) {\r\n        if (error.name === \"AbortError\") {\r\n          console.log(\"Aborted\", card);\r\n        } else {\r\n          throw error;\r\n        }\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    isDeck\r\n      ? newItem\r\n        ? setFormNames({\r\n            titleNewOrEdit: \"New\",\r\n            labelFirst: \"Name\",\r\n            labelSecond: \"Description\",\r\n            titleCardOrDeck: \"Deck\",\r\n          })\r\n        : setFormNames({\r\n            titleNewOrEdit: \"Edit\",\r\n            labelFirst: \"Name\",\r\n            labelSecond: \"Description\",\r\n            titleCardOrDeck: \"Deck\",\r\n          })\r\n      : newItem\r\n      ? setFormNames({\r\n          titleNewOrEdit: \"New\",\r\n          labelFirst: \"Front\",\r\n          labelSecond: \"Back\",\r\n          titleCardOrDeck: \"Card\",\r\n        })\r\n      : setFormNames({\r\n          titleNewOrEdit: \"Edit\",\r\n          labelFirst: \"Front\",\r\n          labelSecond: \"Back\",\r\n          titleCardOrDeck: \"Card\",\r\n        });\r\n  }, [isDeck, newItem]);\r\n\r\n  function textAreaOrNot(whatIsIt, formNames) {\r\n    if (whatIsIt) {\r\n      return (\r\n        <div className=\"form-group\">\r\n          <label for=\"deckName\">{formNames.labelFirst}</label>\r\n          <input\r\n            placeholder=\"Deck Name\"\r\n            className=\"form-control\"\r\n            type=\"text\"\r\n            id=\"deckName\"\r\n            onChange={(event) =>\r\n              setInputsFromForm({\r\n                ...inputsFromForm,\r\n                secondInput: event.target.value,\r\n              })\r\n            }\r\n          />\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className=\"form-group\">\r\n          <label for=\"firstTextArea\">{formNames.labelFirst}</label>\r\n          <textarea\r\n            className=\"form-control\"\r\n            id=\"firstTextArea\"\r\n            placeholder=\"Front side of card\"\r\n            onChange={(event) =>\r\n              setInputsFromForm({\r\n                ...inputsFromForm,\r\n                secondInput: event.target.value,\r\n              })\r\n            }\r\n          ></textarea>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  return (\r\n    <section className=\"container\">\r\n      <h1>{`${formNames.titleNewOrEdit} ${formNames.titleCardOrDeck}`}</h1>\r\n      <form>\r\n        {textAreaOrNot(isDeck, formNames)}\r\n        <div className=\"form-group\">\r\n          <label for=\"secondTextArea\">{formNames.labelSecond}</label>\r\n          <textarea\r\n            className=\"form-control\"\r\n            id=\"secondTextArea\"\r\n            placeholder={isDeck ? \"Description of deck\" : \"Back side of card\"}\r\n            onChange={(event) =>\r\n              setInputsFromForm({\r\n                ...inputsFromForm,\r\n                firstInput: event.target.value,\r\n              })\r\n            }\r\n          ></textarea>\r\n        </div>\r\n        <div>\r\n          <button className=\"btn btn-secondary\">\r\n            {newItem ? \"Done\" : \"Cancel\"}\r\n          </button>\r\n          <button type=\"submit\" className=\"btn btn-primary mx-2\">\r\n            {newItem ? \"Save\" : \"Submit\"}\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </section>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}