{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\brady\\\\Thinkful\\\\Flashcard\\\\Project_Flashcards_Qualified_1\\\\src\\\\Layout\\\\Form.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useParams, useHistory } from \"react-router\";\nimport FormBreadcrumb from \"./FormBreadcrumb\";\nimport { readDeck, readCard, updateCard, updateDeck, createCard, createDeck } from \"../utils/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CreateCard(props) {\n  _s();\n\n  const history = useHistory();\n  const {\n    deckId,\n    cardId\n  } = useParams();\n  const {\n    newItem,\n    isDeck\n  } = props;\n  const [deck, setDeck] = useState({\n    cards: []\n  });\n  const [card, setCard] = useState({});\n  const [filledValue, setFilledValue] = useState({\n    first: \"\",\n    second: \"\"\n  });\n  const [inputsFromForm, setInputsFromForm] = useState({\n    firstInput: \"\",\n    secondInput: \"\"\n  });\n  const [formNames, setFormNames] = useState({\n    labelFirst: \"\",\n    labelSecond: \"\",\n    titleNewOrEdit: \"\",\n    titleCardOrDeck: \"\"\n  });\n  useEffect(() => {\n    const abortController = new AbortController();\n\n    if (deckId) {\n      try {\n        readDeck(deckId, abortController.signal).then(element => {\n          setDeck(element);\n        });\n      } catch (error) {\n        if (error.name === \"AbortError\") {\n          console.log(\"Aborted\", deck);\n        } else {\n          throw error;\n        }\n      }\n    }\n\n    if (cardId) {\n      try {\n        readCard(cardId, abortController.signal).then(element => {\n          setCard(element);\n        });\n      } catch (error) {\n        if (error.name === \"AbortError\") {\n          console.log(\"Aborted\", card);\n        } else {\n          throw error;\n        }\n      }\n    }\n  }, []);\n  useEffect(() => {\n    isDeck ? newItem ? setFormNames({\n      titleNewOrEdit: \"Create\",\n      labelFirst: \"Name\",\n      labelSecond: \"Description\",\n      titleCardOrDeck: \"Deck\"\n    }) : setFormNames({\n      titleNewOrEdit: \"Edit\",\n      labelFirst: \"Name\",\n      labelSecond: \"Description\",\n      titleCardOrDeck: \"Deck\"\n    }) : newItem ? setFormNames({\n      titleNewOrEdit: \"New\",\n      labelFirst: \"Front\",\n      labelSecond: \"Back\",\n      titleCardOrDeck: \"Card\"\n    }) : setFormNames({\n      titleNewOrEdit: \"Edit\",\n      labelFirst: \"Front\",\n      labelSecond: \"Back\",\n      titleCardOrDeck: \"Card\"\n    });\n    if (isDeck && newItem) setFilledValue({\n      first: deck.name,\n      second: deck.description\n    });\n    if (!isDeck && newItem) setFilledValue({\n      first: card.front,\n      second: card.back\n    });\n  }, [isDeck, newItem]);\n\n  function submitHandler(event) {\n    console.log(\"Running\");\n    event.preventDefault();\n\n    if (newItem && isDeck) {\n      createDeck({\n        name: inputsFromForm.firstInput,\n        description: inputsFromForm.secondInput\n      });\n      history.push(`/`);\n    } else if (!newItem && isDeck) {\n      updateDeck({\n        name: inputsFromForm.firstInput,\n        description: inputsFromForm.secondInput,\n        id: deckId\n      });\n      history.push(`/decks/${deckId}`);\n    } else if (newItem && !isDeck) {\n      createCard(deckId, {\n        front: inputsFromForm.firstInput,\n        back: inputsFromForm.secondInput\n      });\n      history.go(0);\n    } else {\n      updateCard({ ...card,\n        front: inputsFromForm.firstInput,\n        back: inputsFromForm.secondInput\n      });\n    }\n  }\n\n  function textAreaOrNot(whatIsIt, formNames) {\n    if (whatIsIt) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          for: \"deckName\",\n          children: formNames.labelFirst\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          placeholder: \"Deck Name\",\n          className: \"form-control\",\n          type: \"text\",\n          id: \"deckName\",\n          value: filledValue.first,\n          onChange: event => setInputsFromForm({ ...inputsFromForm,\n            firstInput: event.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          for: \"firstTextArea\",\n          children: formNames.labelFirst\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: \"form-control\",\n          id: \"firstTextArea\",\n          placeholder: \"Front side of card\",\n          filledValue: filledValue.first,\n          onChange: event => setInputsFromForm({ ...inputsFromForm,\n            firstInput: event.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(FormBreadcrumb, {\n      newItem: newItem,\n      isDeck: isDeck,\n      deckId: deckId,\n      cardId: cardId,\n      deck: deck\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: `${formNames.titleNewOrEdit} ${formNames.titleCardOrDeck}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [textAreaOrNot(isDeck, formNames), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          for: \"secondTextArea\",\n          children: formNames.labelSecond\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: \"form-control\",\n          id: \"secondTextArea\",\n          placeholder: isDeck ? \"Description of deck\" : \"Back side of card\",\n          onChange: event => setInputsFromForm({ ...inputsFromForm,\n            secondInput: event.target.value\n          }),\n          children: filledValue.second\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-secondary\",\n          children: newItem ? \"Done\" : \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary mx-2\",\n          onClick: event => submitHandler(event),\n          children: newItem ? \"Save\" : \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 169,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CreateCard, \"ZuDssw2l3oVgjWmIEQUbZWIKAvc=\", false, function () {\n  return [useHistory, useParams];\n});\n\n_c = CreateCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateCard\");","map":{"version":3,"sources":["C:/Users/brady/Thinkful/Flashcard/Project_Flashcards_Qualified_1/src/Layout/Form.js"],"names":["React","useEffect","useState","useParams","useHistory","FormBreadcrumb","readDeck","readCard","updateCard","updateDeck","createCard","createDeck","CreateCard","props","history","deckId","cardId","newItem","isDeck","deck","setDeck","cards","card","setCard","filledValue","setFilledValue","first","second","inputsFromForm","setInputsFromForm","firstInput","secondInput","formNames","setFormNames","labelFirst","labelSecond","titleNewOrEdit","titleCardOrDeck","abortController","AbortController","signal","then","element","error","name","console","log","description","front","back","submitHandler","event","preventDefault","push","id","go","textAreaOrNot","whatIsIt","target","value"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useParams, useHistory } from \"react-router\";\r\nimport FormBreadcrumb from \"./FormBreadcrumb\";\r\nimport {\r\n  readDeck,\r\n  readCard,\r\n  updateCard,\r\n  updateDeck,\r\n  createCard,\r\n  createDeck,\r\n} from \"../utils/api\";\r\n\r\nexport default function CreateCard(props) {\r\n  const history = useHistory();\r\n  const { deckId, cardId } = useParams();\r\n  const { newItem, isDeck } = props;\r\n  const [deck, setDeck] = useState({ cards: [] });\r\n  const [card, setCard] = useState({});\r\n  const [filledValue, setFilledValue] = useState({ first: \"\", second: \"\" });\r\n  const [inputsFromForm, setInputsFromForm] = useState({\r\n    firstInput: \"\",\r\n    secondInput: \"\",\r\n  });\r\n  const [formNames, setFormNames] = useState({\r\n    labelFirst: \"\",\r\n    labelSecond: \"\",\r\n    titleNewOrEdit: \"\",\r\n    titleCardOrDeck: \"\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    const abortController = new AbortController();\r\n    if (deckId) {\r\n      try {\r\n        readDeck(deckId, abortController.signal).then((element) => {\r\n          setDeck(element);\r\n        });\r\n      } catch (error) {\r\n        if (error.name === \"AbortError\") {\r\n          console.log(\"Aborted\", deck);\r\n        } else {\r\n          throw error;\r\n        }\r\n      }\r\n    }\r\n    if (cardId) {\r\n      try {\r\n        readCard(cardId, abortController.signal).then((element) => {\r\n          setCard(element);\r\n        });\r\n      } catch (error) {\r\n        if (error.name === \"AbortError\") {\r\n          console.log(\"Aborted\", card);\r\n        } else {\r\n          throw error;\r\n        }\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    isDeck\r\n      ? newItem\r\n        ? setFormNames({\r\n            titleNewOrEdit: \"Create\",\r\n            labelFirst: \"Name\",\r\n            labelSecond: \"Description\",\r\n            titleCardOrDeck: \"Deck\",\r\n          })\r\n        : setFormNames({\r\n            titleNewOrEdit: \"Edit\",\r\n            labelFirst: \"Name\",\r\n            labelSecond: \"Description\",\r\n            titleCardOrDeck: \"Deck\",\r\n          })\r\n      : newItem\r\n      ? setFormNames({\r\n          titleNewOrEdit: \"New\",\r\n          labelFirst: \"Front\",\r\n          labelSecond: \"Back\",\r\n          titleCardOrDeck: \"Card\",\r\n        })\r\n      : setFormNames({\r\n          titleNewOrEdit: \"Edit\",\r\n          labelFirst: \"Front\",\r\n          labelSecond: \"Back\",\r\n          titleCardOrDeck: \"Card\",\r\n        });\r\n\r\n    if (isDeck && newItem)\r\n      setFilledValue({ first: deck.name, second: deck.description });\r\n    if (!isDeck && newItem)\r\n      setFilledValue({ first: card.front, second: card.back });\r\n  }, [isDeck, newItem]);\r\n\r\n  function submitHandler(event) {\r\n    console.log(\"Running\");\r\n    event.preventDefault();\r\n    if (newItem && isDeck) {\r\n      createDeck({\r\n        name: inputsFromForm.firstInput,\r\n        description: inputsFromForm.secondInput,\r\n      });\r\n      history.push(`/`);\r\n    } else if (!newItem && isDeck) {\r\n      updateDeck({\r\n        name: inputsFromForm.firstInput,\r\n        description: inputsFromForm.secondInput,\r\n        id: deckId,\r\n      });\r\n      history.push(`/decks/${deckId}`);\r\n    } else if (newItem && !isDeck) {\r\n      createCard(deckId, {\r\n        front: inputsFromForm.firstInput,\r\n        back: inputsFromForm.secondInput,\r\n      });\r\n      history.go(0);\r\n    } else {\r\n      updateCard({\r\n        ...card,\r\n        front: inputsFromForm.firstInput,\r\n        back: inputsFromForm.secondInput,\r\n      });\r\n    }\r\n  }\r\n\r\n  function textAreaOrNot(whatIsIt, formNames) {\r\n    if (whatIsIt) {\r\n      return (\r\n        <div className=\"form-group\">\r\n          <label for=\"deckName\">{formNames.labelFirst}</label>\r\n          <input\r\n            placeholder=\"Deck Name\"\r\n            className=\"form-control\"\r\n            type=\"text\"\r\n            id=\"deckName\"\r\n            value={filledValue.first}\r\n            onChange={(event) =>\r\n              setInputsFromForm({\r\n                ...inputsFromForm,\r\n                firstInput: event.target.value,\r\n              })\r\n            }\r\n          ></input>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className=\"form-group\">\r\n          <label for=\"firstTextArea\">{formNames.labelFirst}</label>\r\n          <textarea\r\n            className=\"form-control\"\r\n            id=\"firstTextArea\"\r\n            placeholder=\"Front side of card\"\r\n            filledValue={filledValue.first}\r\n            onChange={(event) =>\r\n              setInputsFromForm({\r\n                ...inputsFromForm,\r\n                firstInput: event.target.value,\r\n              })\r\n            }\r\n          ></textarea>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <section className=\"container\">\r\n      <FormBreadcrumb\r\n        newItem={newItem}\r\n        isDeck={isDeck}\r\n        deckId={deckId}\r\n        cardId={cardId}\r\n        deck={deck}\r\n      />\r\n      <h1>{`${formNames.titleNewOrEdit} ${formNames.titleCardOrDeck}`}</h1>\r\n      <form>\r\n        {textAreaOrNot(isDeck, formNames)}\r\n        <div className=\"form-group\">\r\n          <label for=\"secondTextArea\">{formNames.labelSecond}</label>\r\n          <textarea\r\n            className=\"form-control\"\r\n            id=\"secondTextArea\"\r\n            placeholder={isDeck ? \"Description of deck\" : \"Back side of card\"}\r\n            onChange={(event) =>\r\n              setInputsFromForm({\r\n                ...inputsFromForm,\r\n                secondInput: event.target.value,\r\n              })\r\n            }\r\n          >\r\n            {filledValue.second}\r\n          </textarea>\r\n        </div>\r\n        <div>\r\n          <button className=\"btn btn-secondary\">\r\n            {newItem ? \"Done\" : \"Cancel\"}\r\n          </button>\r\n          <button\r\n            className=\"btn btn-primary mx-2\"\r\n            onClick={(event) => submitHandler(event)}\r\n          >\r\n            {newItem ? \"Save\" : \"Submit\"}\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </section>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}